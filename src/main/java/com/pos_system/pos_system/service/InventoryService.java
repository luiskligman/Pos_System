/** * WHY INVENTORY SERVICE IS MORE COMPLICATED *  Each Inventory row links a single Store and a single Product with a quantity on-hand. *  We need basic CRUD for the Inventory table. *  We want business methods like "adjust the stock level up/down" or "transfer stock from Store A to Store B." *  All of that must run inside a single transaction so that if one side of the transfer fails, nothing is commited */package com.pos_system.pos_system.service;import com.pos_system.pos_system.model.Inventory;import com.pos_system.pos_system.model.Product;import com.pos_system.pos_system.model.Store;import com.pos_system.pos_system.repository.InventoryRepository;import com.pos_system.pos_system.repository.ProductRepository;import com.pos_system.pos_system.repository.StoreRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.Optional;@Servicepublic class InventoryService {    private final InventoryRepository inventoryRepository;    private final ProductRepository productRepository;    private final StoreRepository storeRepository;    @Autowired    public InventoryService(InventoryRepository inventoryRepository,                            StoreRepository storeRepository,                            ProductRepository productRepository) {        this.inventoryRepository = inventoryRepository;        this.storeRepository = storeRepository;        this.productRepository = productRepository;    }    /**     * After saving a product, ensure that there is an inventory row ( qty = 0 )     * for every store that doesn't already have one/     */    @Transactional    public void initializeForNewProduct(Product product) {        storeRepository.findAll().forEach(store -> {            boolean exists = inventoryRepository.existsByStoreIdAndProductId(store.getId(), product.getId());            if(!exists) {                Inventory inv = new Inventory();                inv.setStore(store);                inv.setProduct(product);                inv.setQuantityOnHand(0);                inventoryRepository.save(inv);            }        });    }    /**     * Get all inventory entries for a given store.     * If the store does not exist, throw an exception     */    @Transactional(readOnly = true)    public List<Inventory> getInventoryByStoreId(Long storeId) {        if (!storeRepository.existsById(storeId)) {            throw new IllegalArgumentException("Store not found with id: " + storeId);        }        return inventoryRepository.findByStoreId(storeId);    }    //TODO this probably does not work    /**     * Get a single inventory entry by its ID.     * @returns Optional.empty() if not found.     */    @Transactional(readOnly = true)    public Optional<Inventory> findInventoryById(Long id) {        return inventoryRepository.findById(id);    }    /**     * Create ( or save ) a new inventory record.     * You should ensure that both storeId and productId exist first.     */    @Transactional    public Inventory createInventory(Long storeId, Long productId, int initialQuantity) {        Store store = storeRepository.findById(storeId)                .orElseThrow(() -> new IllegalArgumentException("Store not found with id: " + storeId));        Product product = productRepository.findById(productId)                .orElseThrow(() -> new IllegalArgumentException("Product not found with id: " + productId));        // If an inventory row already exists for this pair, throw or update instead        Optional<Inventory> existingOpt = inventoryRepository.findByStoreIdAndProductId(storeId, productId);        if (existingOpt.isPresent())            throw new IllegalArgumentException("Inventory already exists for store " + storeId + " and product " + productId);        Inventory newInv = new Inventory();        newInv.setStore(store);        newInv.setProduct(product);        newInv.setQuantityOnHand(initialQuantity);        return inventoryRepository.save(newInv);    }    /**     * Adjust the quantity at a single store for one product.     * If the inventory row doesn't exist, throw an exception     */    @Transactional    public Inventory adjustInventory(Long storeId, Long productId, int delta) {        Inventory inv = inventoryRepository                .findByStoreIdAndProductId(storeId, productId)                .orElseThrow(() -> new IllegalArgumentException(                        "No inventory row for store " + storeId + " and product " +productId));        int newQty = inv.getQuantityOnHand() + delta;        if (newQty < 0) {            throw new IllegalArgumentException("Cannot reduce inventory below zero. Current: " + inv.getQuantityOnHand());        }        inv.setQuantityOnHand(newQty);        // Since we are in a @Transactional method and 'inv' is a managed entity, simply returning it is enough;        // JPA will flush the change on commit        return inv;    }    /**     * Transfer stock from one store to another. Both adjustments happen in a signle @Traansactional block so either     * both succeed or both roll back     */    @Transactional    public void transferStock(Long fromStoreId, Long toStoreId, Long productId, int amount) {        if (amount <= 0)            throw new IllegalArgumentException("Transfer amount must be positive");        // Subtract from the "from" store        adjustInventory(fromStoreId, productId, -amount);        // Add to the "to" store        //TODO        // Inventory is expected to be existing in both stores database        Optional<Inventory> destination = inventoryRepository.findByStoreIdAndProductId(toStoreId, productId);        if (destination.isPresent()) {            adjustInventory(toStoreId, productId, amount);        } else {            createInventory(toStoreId, productId, amount);        }    }    /**     * Delete an inventory row by its ID.     */    public ResponseEntity<Void> deleteInventory(Long inventoryId) {//        inventoryRepository.deleteById(inventoryId);        // If the record doesn't exist, return 404        if(!inventoryRepository.existsById(inventoryId))            return ResponseEntity.notFound().build();        // Otherwise, delete it and return 204 No Content        inventoryRepository.deleteById(inventoryId);        return ResponseEntity.noContent().build();    }//    public boolean existsById(Long id) {//        return inventoryRepository.existsById(id);//    }}